{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting gradient descent....\n",
      "m=1.4554176718736282, b=1.0243460898341017, error=112.12837492690956\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.4562343255586683, b=1.0199347041999498, error=112.1176984965634\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.4577570162904117, b=1.0117094599595604, error=112.10488467607478\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.4553491734534671, b=1.0247161034055785, error=112.12939116376506\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.457169773801224, b=1.01488161619668, error=112.10873262294548\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.4558618394600877, b=1.0219467931114443, error=112.12223871259879\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.457833316118769, b=1.0112973048773397, error=112.10448552779519\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.4569285305183821, b=1.0161847599548717, error=112.11071136376695\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.454744442350064, b=1.0279827293339823, error=112.1391735734623\n",
      "completed gradient desecent..\n",
      "starting gradient descent....\n",
      "m=1.4568661588674607, b=1.0165216780511128, error=112.11126066002684\n",
      "completed gradient desecent..\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "m=1.4568661588674607, b=1.0165216780511128, error=112.11126066002684\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "\n",
    "def error(points, m, b):\n",
    "    # pass\n",
    "    error_val = 0.0\n",
    "    for i in range(len(points)):\n",
    "        x = points[i,0]\n",
    "        y = points[i,1]\n",
    "        error_val += (y-(m*x+b))**2\n",
    "        # print((y-(m*x+b))**2)\n",
    "    return error_val/float(len(points))\n",
    "\n",
    "\n",
    "def gradient_runner(points, m_current, b_current, learning_rate):\n",
    "    dm = 0.0\n",
    "    db = 0.0\n",
    "    N = len(points)\n",
    "    for i in range(N):\n",
    "        dm += -(points[i,1]-(m_current*points[i,0]+b_current))*points[i,0]\n",
    "        db += -(points[i,1]-(m_current*points[i,0]+b_current))\n",
    "\n",
    "    m = m_current - dm*learning_rate/N\n",
    "    b = b_current - db*learning_rate/N\n",
    "    # print(m, b)\n",
    "    return [m,b]\n",
    "\n",
    "def gradient(points, m, b, learning_rate, num_iter):\n",
    "    error_list = []\n",
    "    for i in range(num_iter):\n",
    "        m, b = gradient_runner(points, m, b, learning_rate)\n",
    "        error_list.append(error(points, m, b)) \n",
    "    # print(m,b)\n",
    "    return [m,b, error_list]\n",
    "\n",
    "if __name__==\"__main__\":\n",
    "    points = np.genfromtxt(\"Desktop/data.csv\", delimiter=',')\n",
    "    \n",
    "    #learning rate is modified from 0.1 to 0.0001 as a factor of 10 upon each iteration i.e, 0.1, 0.01, 0.001, 0.0001....etc\n",
    "    learning_rate = 0.0001\n",
    "    num_iter = 20\n",
    "    \n",
    "    #picking 10 random m, b values and running gradient descent and storing the best m,b with min error...\n",
    "    for i in range(10):\n",
    "        m = random.random()\n",
    "        b = 1\n",
    "        # error = 0\n",
    "        \n",
    "        old_error = error(points, m, b)\n",
    "        print(\"starting gradient descent....\")\n",
    "        m, b, error_list = gradient(points, m, b, learning_rate, num_iter)\n",
    "        \n",
    "        diff_errors_on_rand_mb = error(points,m,b)\n",
    "        print(\"m={}, b={}, error={}\".format(m, b, error(points,m,b)))\n",
    "        print(\"completed gradient desecent..\")\n",
    "        \n",
    "        # storing the m,b with min error and these are used while plotting the graph at last..\n",
    "        if diff_errors_on_rand_mb > old_error:\n",
    "            final_m, final_b = m, b\n",
    "    # two plots\n",
    "    # 1) scatter plot showing the data \n",
    "    plt.subplot(1,2,1)\n",
    "    plt.title(\"all points\")\n",
    "    plt.plot(points[:,0], points[:,1],'o')\n",
    "    \n",
    "    # the line of best fit..\n",
    "    plt.plot([0,80],[b, m*80+b], 'k-')\n",
    "    \n",
    "    # 2) error values\n",
    "    x = np.linspace(0, 50, num_iter)\n",
    "    plt.subplot(1,2,2)\n",
    "    plt.title(\"error\")\n",
    "    plt.plot(x, error_list, 'o-')\n",
    "    plt.show()\n",
    "    print(\"m={}, b={}, error={}\".format(m, b, error(points,m,b)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
